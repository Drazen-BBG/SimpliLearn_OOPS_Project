
Sprint Planning

There are five sprites each taking 3-7 days. The goal here is to have a working console app the whole time with limited
functionality until we achieve full functionality.

Sprint 1:
The goal of the 1st sprint is to create an IntelliJ IDEA project, set up a git repository and push it to GitHub. The
functionality goal is to have a working app the whole time and a very nice presentation in the console. We will create
welcome message & goodbye message using developer made methods for nice and even console presentation. We will create
numerus variables to store all the info needed for a proper app presentation and functionality. Few of those variables
are going to hold app name, developer name, app path etc.
In the second part of the 1st sprite we will create a method to display main menu, a method to get user input, we will
need two variables to store the absolute app path and another one to be able to store current app path for the purpose
of navigating through the directories. We need those and their getters and setters not only to go into directories or
go back to parent directories, we need them also to manage file explorer presentation, sorting, searching, file
creation and deletion and for many more options we want to implement into our app.
In the third part of the 1st sprite we will further develop the user input method to be able to handle incorrect user
input in terms of data type and menu range.

Sprite 2:
In the 2nd sprite we want to add functionality to our main menu and we will start slowly firstly creating new methods
to display developer info, delay method to have even better presentation, and then we will go forward and make
organized execution of the app organizing the method calls in a start app method, we will also create a method to
terminate the app.
In the second part of our 2nd sprite we will test newly created main menu and user input method, making sure all the
methods work properly and checking if our user input can handle incorrect user input.

Sprint 3:
In the 3rd spring we will focus on the file explorer and its file details related methods. We need to be able to list
all the files and folder in the directory path, need to display general options for our file explorer and most
importantly need to be able to list all the files dynamically and offer a dynamic menu to be able to see file details
or folder details from the file explorer.
In the second part of the 3rd sprint we will develop go into directory method to be able to enter directories and go to
parent directory method to be able to go to a parent directory. By now we will have nice main menu and file explorer
where we can go through folders and see details for selected files or folders. Now when we can navigate through the
directories we will create methods for creating and deleting files. We will test the app and finish for this sprite.


Sprite 4:
Our app needs to keep developing and in the 4th sprite we will add the remaining needed functionality and that is
sorting and searching. First, we will refactor the code and do a nice comment markup of the whole code before we go
for implementation of the remaining functionally.
In the second part of our 4th sprite we will develop sort ascending and sort descending methods which are going to
sort the files and then present them using the file explorer method. Those changes are going to influence the whole
code and many changes in the code will need to be done to be able to join the soring functionality with the all
existing functionality implemented in the file explorer.

In the third part of the 4th sprint we will implement the search directory method to give the user an option to search
for a file or folder in the file explorer after this is done app needs to be tested and documented.

Sprite 5:
In our 5th and last sprite we will test the app do necessary changes and refactoring to make the code shorter where it
can be done easily. After all the testing is done we will add more comments in the code and then we will make the
necessary documentation for this app to be able to make a nice report, app workflow chart and algorithm details.
